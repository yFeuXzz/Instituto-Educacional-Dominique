// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations - removida a referência ao student temporariamente
  messages  ContactMessage[]
  teacher   Teacher?
  // student   Student?
  
  @@map("users")
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String?
  published Boolean  @default(false)
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String
  message   String
  status    String   @default("new") // new, read, replied
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  
  @@map("contact_messages")
}

model Student {
  id          String   @id @default(cuid())
  // userId      String   @unique  // Removido temporariamente
  name        String
  email       String   @unique
  phone       String
  address     String?
  birthDate   String?
  grade       String?  // 6ano, 7ano, 8ano, 9ano
  classId     String?
  enrollment  String   @unique // Matrícula
  password    String
  status      String   @default("active") // active, inactive, graduated
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations - removidas temporariamente
  // user        User     @relation(fields: [userId], references: [id])
  // class       Class?   @relation(fields: [classId], references: [id])
  // grades      Grade[]
  // attendance  Attendance[]
  
  @@map("students")
}

model Class {
  id          String   @id @default(cuid())
  name        String
  description String?
  subject     String
  teacher     String
  schedule    String?
  capacity    Int      @default(30)
  status      String   @default("active") // active, inactive
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations - removidas temporariamente
  // students    Student[]
  activities  Activity[]
  
  @@map("classes")
}

model Activity {
  id          String   @id @default(cuid())
  title       String
  description String?
  type        String   // assignment, test, project, other
  classId     String
  subject     String   // algebra, artes, ed_fisica, geografia, geometria, gramatica, historia, ingles, ciencias, redacao, fisica, quimica, biologia
  grade       String   // "6ano", "7ano", "8ano", "9ano"
  dueDate     String?
  maxGrade    Float    @default(10.0)
  status      String   @default("active") // active, completed, cancelled
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  class       Class    @relation(fields: [classId], references: [id])
  grades      Grade[]
  
  @@map("activities")
}

model Grade {
  id          String   @id @default(cuid())
  studentId   String
  activityId  String
  bimester    Int      // 1, 2, 3, 4
  noteType    String   // "note1", "note2", "note3"
  grade       Float
  maxGrade    Float    @default(10.0)
  status      String   @default("graded") // graded, pending, absent
  gradedAt    DateTime @default(now())
  observations String?
  
  // Relations - removidas temporariamente
  // student     Student  @relation(fields: [studentId], references: [id])
  activity    Activity @relation(fields: [activityId], references: [id])
  
  @@unique([studentId, activityId, bimester, noteType])
  @@map("grades")
}

model BimesterGrade {
  id          String   @id @default(cuid())
  studentId   String
  studentName String
  subject     String
  classId     String
  bimester    Int      // 1, 2, 3, 4
  note1       Float?
  note2       Float?
  note3       Float?
  average     Float?
  status      String   @default("graded") // graded, pending
  gradedAt    DateTime @default(now())
  gradedBy    String?  // ID do usuário que lançou a nota
  
  @@map("bimester_grades")
}

model Teacher {
  id          String   @id @default(cuid())
  userId      String   @unique
  name        String
  email       String   @unique
  phone       String?
  subjects    String   @default("[]") // JSON array de matérias
  grades      String   @default("[]") // JSON array de séries
  password    String
  status      String   @default("active") // active, inactive
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id])
  
  @@map("teachers")
}

model Attendance {
  id            String   @id @default(cuid())
  studentId     String
  classId       String
  date          String
  status        String   // present, absent, late
  observations  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations - removidas temporariamente
  // student       Student  @relation(fields: [studentId], references: [id])
  
  @@map("attendance")
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}